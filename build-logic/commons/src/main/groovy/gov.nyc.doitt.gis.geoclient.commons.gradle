plugins {
    id('java')
    id('gov.nyc.doitt.gis.geoclient.jacoco')
    id('gov.nyc.doitt.gis.geoclient.spotless')
    id('gov.nyc.doitt.gis.geoclient.versions')
    //id('checkstyle')
}

// Used by subproject build.gradle files
// to declare their own group as:
//   "${group}.<top-level-package>"
// Consuming builds then use:
//   "${group}.<top-level-package>:<subproject-name>"
group = 'gov.nyc.doitt.gis.geoclient'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    description = 'Generates project-level javadoc for use in -javadoc jar'
    options.addStringOption('Xdoclint:none', '-quiet')
    options.author = true
    options.encoding = 'UTF-8'
    options.header = project.name
    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.noTimestamp = true
    options.use = true
    // Suppress warnings due to cross-module @see and @link references.
    // Note that global "api" task does display all warnings.
    logging.captureStandardError LogLevel.INFO
    logging.captureStandardOutput LogLevel.INFO  // suppress "## warnings" message
}

dependencies {
    implementation(platform('gov.nyc.doitt.gis.geoclient.platform:geoclient-platform'))
    implementation('org.springframework.boot:spring-boot-starter-logging')

    testImplementation(platform('gov.nyc.doitt.gis.geoclient.platform:test-platform'))
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.junit.jupiter:junit-jupiter')
    testRuntimeOnly('org.junit.platform:junit-platform-launcher')
    // Avoids log warning generated because of JUnit dependency on apiguardian:
    // 'warning: unknown enum constant Status.STABLE'
    // This was supposed to have been fixed in JUnit 5.1.x, but still happens,
    // possibly because gradle platform or spring BOM.
    testRuntimeOnly('org.apiguardian:apiguardian-api')
}

tasks.named("test") {
    useJUnitPlatform()
}

tasks.register('printConfigurations') {
    def allConfigurations = configurations.all
    doLast {
        println "Configurations:"
        allConfigurations.each { c ->
            println "${c.name}"
            println '----------------------------'
            //if (c.name == 'default') {
            def allArtifacts = c.allArtifacts
            if (allArtifacts) {
                allArtifacts?.each { a ->
                    String aType = a.getType()
                    aType = aType ? " (${a.getType()})": ''
                    println "  [artifact] ${a.getName()}${aType}: ${a.getFile()}"
                }
            } else {
                println '  [artifact] none'
            }
            println()
            //}
        }
    }
}

tasks.register('printSourceSets') {

    doLast{
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
            print "-->Compile classpath:\n"
            srcSet.compileClasspath.files.each {
                print "  "+it.path+"\n"
            }
            println ""
        }
    }
}
