openapi: 3.0.3
info:
  title: Geoclient API
  description: Geoclient provides developer-friendly APIs for geocoding New York City locations.
  version: 2.0.1
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
externalDocs:
  url: https://mlipper.github.io/geoclient/docs/current/user-guide/
servers:
  - url: https://api.nyc.gov/geoclient/v2
    description: NYC API Developers Portal
  - url: http://localhost:{port}/geoclient/v2
    description: Local development server
    variables:
      port:
        default: '8080'
        enum:
          - '8080'
          - '8081'
        description: Port for local development server
paths:
  /address:
    get:
      description: >
        Returns street centerline-based and/or property-level data about an address.
        Either a borough or a zip parameter must be given otherwise the location cannot be geocoded.
      responses:
        '200':
          description: OK
      parameters:
        - name: houseNumber
          in: query
          required: true
          schema:
            type: string
        - name: street
          in: query
          required: true
          schema:
            type: string
        - name: borough
          $ref: "#/components/parameters/boroughParam"
        - name: zip
          description: USPS zip code (either this or 'borough' parameter is required)
          in: query
          required: false
          schema:
            type: string
  /addresspoint:
    get:
      description: >
        Returns saddress point data.
        Either a borough or a zip parameter must be given otherwise the location cannot be geocoded.
      responses:
        '200':
          description: OK
      parameters:
        - name: houseNumber
          in: query
          required: true
          schema:
            type: string
        - name: street
          in: query
          required: true
          schema:
            type: string
        - name: borough
          $ref: "#/components/parameters/boroughParam"
        - name: zip
          description: USPS zip code (either this or 'borough' parameter is required)
          in: query
          required: false
          schema:
            type: string
  /bbl:
    get:
      description: Returns property-level data associated with a BBL
      responses:
        '200':
          description: OK
      parameters:
        - name: borough
          $ref: "#/components/parameters/boroughParamRequired"
        - name: block
          in: query
          description: Tax block
          required: true
          schema:
            type: string
        - name: lot
          in: query
          description: Tax lot
          required: true
          schema:
            type: string
  /bin:
    get:
      description: Returns property-level data associated with a BIN
      responses:
        '200':
          description: OK
      parameters:
        - name: bin
          in: query
          description: Seven-digit Building Identification Number (BIN)
          required: true
          schema:
            type: string
  /blockface:
    get:
      description: >
        Returns information about a street segment.
      responses:
        '200':
          description: OK
      parameters:
        - name: onStreet
          in: query
          description: Name of on street
          required: true
          schema:
            type: string
        - name: crossStreetOne
          in: query
          description: First cross street
          required: true
          schema:
            type: string
        - name: crossStreetTwo
          in: query
          description: Second cross street
          required: true
          schema:
            type: string
        - name: borough
          $ref: "#/components/parameters/boroughParamRequired"
        - name: boroughCrossStreetOne
          description: Only required if different borough than 'onStreet' or if parameter 'boroughCrossStreetTwo' is used.
          in: query
          required: false
          schema:
            type: string
            enum:
              - 'Manhattan'
              - 'Bronx'
              - 'Brooklyn'
              - 'Queens'
              - 'Staten Island'
              - 'MN'
              - 'BX'
              - 'QN'
              - 'BK'
              - 'SI'
              - '1'
              - '2'
              - '3'
              - '4'
              - '5'
        - name: boroughCrossStreetTwo
          description: Only required if different borough than 'onStreet' or if parameter 'boroughCrossStreetOne' is used.
          in: query
          required: false
          schema:
            type: string
            enum:
              - 'Manhattan'
              - 'Bronx'
              - 'Brooklyn'
              - 'Queens'
              - 'Staten Island'
              - 'MN'
              - 'BX'
              - 'QN'
              - 'BK'
              - 'SI'
              - '1'
              - '2'
              - '3'
              - '4'
              - '5'
        - name: compassDirection
          description: Compass direction (only required when the three street parameters describe more than one segment)
          in: query
          required: false
          schema:
            type: string
            enum: ['N', 'S', 'E', 'W']
  /doc:
    get:
      description: Geoclient HTML documentation
      responses:
        '200':
          description: OK
  /intersection:
    get:
      description: >
        Returns information about an intersection.
      responses:
        '200':
          description: OK
      parameters:
        - name: crossStreetOne
          in: query
          description: First cross street
          required: true
          schema:
            type: string
        - name: crossStreetTwo
          in: query
          description: Second cross street
          required: true
          schema:
            type: string
        - name: borough
          $ref: "#/components/parameters/boroughParamRequired"
        - name: boroughCrossStreetTwo
          description: Borough of cross street two is only required if different than borough for 'crossStreetOne'.
          in: query
          required: false
          schema:
            type: string
            enum:
              - 'Manhattan'
              - 'Bronx'
              - 'Brooklyn'
              - 'Queens'
              - 'Staten Island'
              - 'MN'
              - 'BX'
              - 'QN'
              - 'BK'
              - 'SI'
              - '1'
              - '2'
              - '3'
              - '4'
              - '5'
        - name: compassDirection
          description: Only required when streets intersect more than once.
          in: query
          required: false
          schema:
            type: string
            enum: ['N', 'S', 'E', 'W']
  /normalize:
    get:
      description: Normalizes a street name using Geosupport conventions.
      responses:
        '200':
          description: OK
      parameters:
        - name: name
          description: Name of a (possibly non-existant) street
          in: query
          required: true
          schema:
            type: string
        - name: length
          description: The length of the normalized street name that is returned. Valid values are from 4 through 32. If no parameter is given, defaults to 32. 
          in: query
          required: false
          schema:
            type: integer
            minimum: 4
            maximum: 32
        - name: format
          description: (S)ort format or (C)ompact format. Defaults to sort format.
          in: query
          required: false
          schema:
            type: string
            enum: ['S', 'C']
  /place:
    get:
      description: >
        Returns street centerline-based and/or property-level data about a well-known place name.
        Either a borough or a zip parameter must be given otherwise the location cannot be geocoded.
      responses:
        '200':
          description: OK
      parameters:
        - name: name
          description: Well-known NYC place name (e.g., "Empire State Building" in Manhattan)
          in: query
          required: true
          schema:
            type: string
        - name: borough
          $ref: "#/components/parameters/boroughParam"
        - name: zip
          description: USPS zip code (either this or 'borough' parameter is required)
          in: query
          required: false
          schema:
            type: string
  /search:
    get:
      description: Single-field search for address, bbl, bin, blockface, intersection or place locations
      responses:
        '200':
          description: OK
      parameters:
        - name: input
          in: query
          description: Location to geocode
          required: true
          schema:
            type: string
        - name: exactMatchForSingleSuccess
          in: query
          description: Whether a search returning only one possible successfully geocoded location is considered an exact match.
          required: false
          schema:
            type: string
            enum:
              - true
              - false
        - name: exactMatchMaxLevel
          in: query
          description: The maximum number of sub-search levels to perform if Geosupport rejects the input but suggests alternative street names, etc. Defaults to 3. Maximum is allowable value is 6.
          required: false
          schema:
            type: string
        - name: returnPolicy
          in: query
          description: Whether to return information on the search policy used to perform the search.
          required: false
          schema:
            type: string
            enum:
              - true
              - false
        - name: returnPossiblesWithExact
          in: query
          description: Whether to also return successfully geocoded possible matches when available in addition to the exact match.
          required: false
          schema:
            type: string
            enum:
              - true
              - false
        - name: returnRejections
          in: query
          description: Whether to return rejected response data from Geosupport.
          required: false
          schema:
            type: string
            enum:
              - true
              - false
        - name: returnTokens
          in: query
          description: Whether to return the parsed input tokens recognized by the parser.
          required: false
          schema:
            type: string
            enum:
              - true
              - false
        - name: similarNamesDistance
          in: query
          description: Maximum allowable Levenshtein distance between user input and a similar name suggestion from Geosupport. Defaults to 8. A higher number will allow more "guesses" to be made about an unrecognized street name.
          required: false
          schema:
            type: string
  /streetcode:
    get:
      description: Find the the street name for a B5SC, B7SC, or B10SC street code
      responses:
        '200':
          description: OK
      parameters:
        - name: streetCode
          in: query
          description: B5SC, B7SC, or B10SC street code
          required: true
          schema:
            type: string
        - name: streetCodeTwo
          in: query
          description: B5SC, B7SC, or B10SC second street code
          required: false
          schema:
            type: string
        - name: streetCodeThree
          in: query
          description: B5SC, B7SC, or B10SC third street code
          required: false
          schema:
            type: string
        - name: length
          in: query
          description: The length of the normalized street name that is returned. Valid values are from 4 through 32. If no parameter is given, defaults to 32.
          required: false
          schema:
            type: integer
            enum:
              - minimum: 4
              - maximum: 32
        - name: format
          description: (S)ort format or (C)ompact format. Defaults to sort format.
          in: query
          required: false
          schema:
            type: string
            enum: ['S', 'C']
  /version:
    get:
      description: Geoclient and Geosupport version information
      responses:
        '200':
          description: Version information for this service
components:
  parameters:
    boroughParam:
      name: borough
      description: Borough of NYC
      in: query
      required: false
      schema:
        type: string
        enum:
          - 'Manhattan'
          - 'Bronx'
          - 'Brooklyn'
          - 'Queens'
          - 'Staten Island'
          - 'MN'
          - 'BX'
          - 'QN'
          - 'BK'
          - 'SI'
          - '1'
          - '2'
          - '3'
          - '4'
          - '5'
    boroughParamRequired:
      name: borough
      description: Borough of NYC
      in: query
      required: true
      schema:
        type: string
        enum:
          - 'Manhattan'
          - 'Bronx'
          - 'Brooklyn'
          - 'Queens'
          - 'Staten Island'
          - 'MN'
          - 'BX'
          - 'QN'
          - 'BK'
          - 'SI'
          - '1'
          - '2'
          - '3'
          - '4'
          - '5'

  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: Ocp-Apim-Subscription-Key
#    appIdAuth:
#      type: apiKey
#      in: query
#      name: app_id
#    appKeyAuth:
#      type: apiKey
#      in: query
#      name: app_key
#  responses:
#    '200':
#      description: OK
#    '400':
#      description: Bad Request
#    '401':
#      description: Unauthorized
#    '403':
#      description: Forbidden
#    '404':
#      description: Not Found
#    '5XX':
#      description: Internal Server Error
security:
  - apiKeyAuth: []